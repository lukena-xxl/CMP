# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
    - { resource: packages/doctrine_extensions.yaml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # array/collection parameters
    #app.supported_locales: ['ru', 'uk']
    locale: 'ru'
    app_locales: 'ru|uk'
    user_roles: ['ROLE_ADMIN', 'ROLE_SUPERADMIN']
    image_product_dir: '%kernel.project_dir%/public/uploads/product'
    image_product_subdirs: [800, 150]
    image_item_dir: '%image_product_dir%/item'
    image_category_dir: '%kernel.project_dir%/public/uploads/category'
    image_article_dir: '%kernel.project_dir%/public/uploads/article'
    image_order_dir: '%kernel.project_dir%/public/uploads/order'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $defaultLocale: '%locale%'
            $locales: '%app_locales%'
            $userRoles: '%user_roles%'
            $image_product_dir: '%image_product_dir%'
            $image_product_subdirs: '%image_product_subdirs%'
            $image_item_dir: '%image_item_dir%'
            $image_category_dir: '%image_category_dir%'
            $image_article_dir: '%image_article_dir%'
            $image_order_dir: '%image_order_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Services\Common\MailInformer:
        arguments:
            $email_admin: '%env(EMAIL_ADMIN)%'
            $email_transfer: '%env(EMAIL_TRANSFER)%'

    App\Services\Common\TelegramInformer:
        arguments:
            $tm_token: '%env(TELEGRAM_BOT_TOKEN)%'
            $tm_user_id: '%env(TELEGRAM_USER_ID)%'

    App\Twig\:
        resource: '../src/Twig'
        public: false
        arguments: ['@request_stack']
        tags:
            - { name: twig.extension }

    App\Form\Admin\User\UserType:
        arguments: ['%user_roles%']
        tags: [form.type]

    App\EventListener\ProductImageListener:
        arguments: ['@parameter_bag']
        tags:
            - { name: doctrine.orm.entity_listener, event: preRemove, entity: App\Entity\ProductImage }
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Entity\ProductImage, method: updateProduct }
            - { name: doctrine.orm.entity_listener, event: postUpdate, entity: App\Entity\ProductImage, method: updateProduct }

    App\EventListener\ProductItemListener:
        arguments: ['@parameter_bag']
        tags:
            - { name: doctrine.orm.entity_listener, event: preRemove, entity: App\Entity\ProductItem }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\ProductItem }
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Entity\ProductItem, method: updateProduct }
            - { name: doctrine.orm.entity_listener, event: postUpdate, entity: App\Entity\ProductItem, method: updateProduct }

    App\EventListener\CategoryListener:
        arguments: ['@parameter_bag']
        tags:
            - { name: doctrine.orm.entity_listener, event: preRemove, entity: App\Entity\Category }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\Category }

    App\EventListener\ArticleListener:
        arguments: ['@parameter_bag']
        tags:
            - { name: doctrine.orm.entity_listener, event: preRemove, entity: App\Entity\Article }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\Article }

    App\EventListener\UserListener:
        arguments: ['@security.user_password_encoder.generic']
        tags:
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\User }

    App\EventListener\OrderProductListener:
        arguments: ['@parameter_bag']
        tags:
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Entity\OrderProduct }
            - { name: doctrine.orm.entity_listener, event: preRemove, entity: App\Entity\OrderProduct }

    App\EventListener\OrderListener:
        arguments: ['@translator.default']
        tags:
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Entity\Orders }
